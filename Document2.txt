// esi_DrugTransfer.js
// Used in esi_DrugTransfer.html
//Created on Aug 31 2017/CS

if (!this.JSON) { this.JSON = {}; } (function () { function f(n) { return n < 10 ? '0' + n : n; } if (typeof Date.prototype.toJSON !== 'function') { Date.prototype.toJSON = function (key) { return isFinite(this.valueOf()) ? this.getUTCFullYear() + '-' + f(this.getUTCMonth() + 1) + '-' + f(this.getUTCDate()) + 'T' + f(this.getUTCHours()) + ':' + f(this.getUTCMinutes()) + ':' + f(this.getUTCSeconds()) + 'Z' : null; }; String.prototype.toJSON = Number.prototype.toJSON = Boolean.prototype.toJSON = function (key) { return this.valueOf(); }; } var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g, escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g, gap, indent, meta = { '\b': '\\b', '\t': '\\t', '\n': '\\n', '\f': '\\f', '\r': '\\r', '"': '\\"', '\\': '\\\\' }, rep; function quote(string) { escapable.lastIndex = 0; return escapable.test(string) ? '"' + string.replace(escapable, function (a) { var c = meta[a]; return typeof c === 'string' ? c : '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4); }) + '"' : '"' + string + '"'; } function str(key, holder) { var i, k, v, length, mind = gap, partial, value = holder[key]; if (value && typeof value === 'object' && typeof value.toJSON === 'function') { value = value.toJSON(key); } if (typeof rep === 'function') { value = rep.call(holder, key, value); } switch (typeof value) { case 'string': return quote(value); case 'number': return isFinite(value) ? String(value) : 'null'; case 'boolean': case 'null': return String(value); case 'object': if (!value) { return 'null'; } gap += indent; partial = []; if (Object.prototype.toString.apply(value) === '[object Array]') { length = value.length; for (i = 0; i < length; i += 1) { partial[i] = str(i, value) || 'null'; } v = partial.length === 0 ? '[]' : gap ? '[\n' + gap + partial.join(',\n' + gap) + '\n' + mind + ']' : '[' + partial.join(',') + ']'; gap = mind; return v; } if (rep && typeof rep === 'object') { length = rep.length; for (i = 0; i < length; i += 1) { k = rep[i]; if (typeof k === 'string') { v = str(k, value); if (v) { partial.push(quote(k) + (gap ? ': ' : ':') + v); } } } } else { for (k in value) { if (Object.hasOwnProperty.call(value, k)) { v = str(k, value); if (v) { partial.push(quote(k) + (gap ? ': ' : ':') + v); } } } } v = partial.length === 0 ? '{}' : gap ? '{\n' + gap + partial.join(',\n' + gap) + '\n' + mind + '}' : '{' + partial.join(',') + '}'; gap = mind; return v; } } if (typeof JSON.stringify !== 'function') { JSON.stringify = function (value, replacer, space) { var i; gap = ''; indent = ''; if (typeof space === 'number') { for (i = 0; i < space; i += 1) { indent += ' '; } } else if (typeof space === 'string') { indent = space; } rep = replacer; if (replacer && typeof replacer !== 'function' && (typeof replacer !== 'object' || typeof replacer.length !== 'number')) { throw new Error('JSON.stringify'); } return str('', { '': value }); }; } if (typeof JSON.parse !== 'function') { JSON.parse = function (text, reviver) { var j; function walk(holder, key) { var k, v, value = holder[key]; if (value && typeof value === 'object') { for (k in value) { if (Object.hasOwnProperty.call(value, k)) { v = walk(value, k); if (v !== undefined) { value[k] = v; } else { delete value[k]; } } } } return reviver.call(holder, key, value); } text = String(text); cx.lastIndex = 0; if (cx.test(text)) { text = text.replace(cx, function (a) { return '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4); }); } if (/^[\],:{}\s]*$/.test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, '@').replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) { j = eval('(' + text + ')'); return typeof reviver === 'function' ? walk({ '': j }, '') : j; } throw new SyntaxError('JSON.parse'); }; } }());

var PlanMemberID;
var PlanMemberName;

document.onreadystatechange = function () {
    if (document.readyState == "complete") {
        getMemberDetails();
        getMemberShippingAddress();
        document.getElementById('drug1').onchange = function () {
            document.getElementById('txtName1').disabled = !this.checked;
            document.getElementById('txtPhone1').disabled = !this.checked;
            document.getElementById('txtFax1').disabled = !this.checked;
            document.getElementById('lstAddress1').disabled = !this.checked;
        };
        document.getElementById('drug3').onchange = function () {
            document.getElementById('txtName3').disabled = !this.checked;
            document.getElementById('txtPhone3').disabled = !this.checked;
            document.getElementById('txtFax3').disabled = !this.checked;
            document.getElementById('lstAddress3').disabled = !this.checked;
        };
        document.getElementById('drug4').onchange = function () {
            document.getElementById('txtName4').disabled = !this.checked;
            document.getElementById('txtPhone4').disabled = !this.checked;
            document.getElementById('txtFax4').disabled = !this.checked;
            document.getElementById('lstAddress4').disabled = !this.checked;
        };
        document.getElementById('drug5').onchange = function () {
            document.getElementById('txtName5').disabled = !this.checked;
            document.getElementById('txtPhone5').disabled = !this.checked;
            document.getElementById('txtFax5').disabled = !this.checked;
            document.getElementById('lstAddress5').disabled = !this.checked;
        };
        document.getElementById('drug6').onchange = function () {
            document.getElementById('txtName6').disabled = !this.checked;
            document.getElementById('txtPhone6').disabled = !this.checked;
            document.getElementById('txtFax6').disabled = !this.checked;
            document.getElementById('lstAddress6').disabled = !this.checked;
        };
        getMemberCreditCardInfo();
    }
}

var SDK = SDK || {};
SDK.ESI = function () {
    "use strict";

    var getClientUrl = function () {
        //Get CRM Organization URL
        if (typeof window.parent.Xrm.Page.context == "object")
            return (window.parent.Xrm.Page.context.getClientUrl());
        else
            return "";
    };

    var retrieve = function (url, success, error) {
        var parameters = {};
        parameters.MemberID = "1234";
        var req = new XMLHttpRequest();
        req.open("POST", getClientUrl() + url, true);
        req.setRequestHeader("OData-MaxVersion", "4.0");
        req.setRequestHeader("OData-Version", "4.0");
        req.setRequestHeader("Accept", "application/json");
        req.setRequestHeader("Content-Type", "application/json; charset=utf-8");
        req.onreadystatechange = function () {
            if (this.readyState == 4 /* complete */) {
                req.onreadystatechange = null;
                if (this.status == 200) {
                    if (success)
                        success(JSON.parse(this.responseText));
                }
                else {
                    if (error)
                        error(this.response);
                }
            }
        };
        req.send(JSON.stringify(parameters));
    };

    var fetchXML = function (entityName, fetchXML, success, error) {
        var req = new XMLHttpRequest();
        var encodedFetchXML = encodeURIComponent(fetchXML);

        req.open("GET", getClientUrl() + "/api/data/v8.0/" + entityName + "?fetchXml=" + encodedFetchXML, true);
        req.setRequestHeader("OData-MaxVersion", "4.0");
        req.setRequestHeader("OData-Version", "4.0");
        req.setRequestHeader("Content-type", "application/json");
        req.setRequestHeader("Accept", "application/json");
        req.setRequestHeader("json", true);
        req.setRequestHeader("Content-Type", "application/json; charset=utf-8");
        req.setRequestHeader("Prefer", "odata.include-annotations=\"OData.Community.Display.V1.FormattedValue\"");
        req.onreadystatechange = function () {
            if (this.readyState == 4 /* complete */) {
                req.onreadystatechange = null;
                if (this.status == 200) {
                    if (success)
                        success(JSON.parse(this.responseText));
                }
                else {
                    if (error)
                        error(this.response);
                }
            }
        };
        req.send();
    };

    return {
        Retrieve: retrieve,
        RetrieveFetchXML: fetchXML
    };
}();

function getMemberDetails() {
    var vals = new Array();
    var hrefSplit = document.location.href.split("Data=");

    if (hrefSplit.length > 0) {
        vals = hrefSplit[1].split("&");
        for (var i in vals) {
            vals[i] = vals[i].replace(/\+/g, " ").split("=");
        }
        //Extract MemberID
        parseDataValue(vals[0][0]);
    }
    else {
        noParams();
    }
}

function parseDataValue(datavalue) {
    if (datavalue != "") {
        var vals = new Array();

        vals = decodeURIComponent(datavalue).split("&");
        for (var i in vals) {
            vals[i] = vals[i].replace(/\+/g, " ").split("=");
        }
        getMemberAddress(vals[0][1]);
    }
    else {
        noParams();
    }
}

function noParams() {
    Xrm.Utility.alertDialog("No data parameter was passed to this page");
}

function getMemberAddress(memberID) {
    if (memberID != null) {
        PlanMemberID = memberID;
        var entityName = "esi_planmembers";

        var fetchXML = ['<fetch version="1.0" output-format="xml-platform" mapping="logical" distinct="false">' +
                        '<entity name="esi_planmember">' +
                        '<attribute name="esi_planmemberid" />' +
                        '<attribute name="esi_fullname" />' +
                        '<attribute name="esi_incareofline" />' +
                        '<attribute name="esi_addressline1" />' +
                        '<attribute name="esi_addressline2" />' +
                        '<attribute name="esi_cityname" />' +
                        '<attribute name="esi_provincename" />' +
                        '<attribute name="esi_preferredcontactmethod" />' +
                        '<attribute name="createdon" />' +
                          '<filter type="and">' +
                            '<condition attribute="esi_planmemberid" operator="eq" uitype="esi_planmember" value="' + memberID + '" />' +
                          '</filter>' +
                      '</entity>' +
                    '</fetch>'];
        SDK.ESI.RetrieveFetchXML(entityName, fetchXML, successcallbackMember, errorcallback);
    }
}

function successcallbackMember(response) {
    if (response == null) return;
    var responseValue = response.value;

    document.getElementById("txtFullName").innerText = responseValue[0]["esi_fullname"];

    var address = "";
    if (responseValue[0]["esi_incareofline"] != null) address += responseValue[0]["esi_incareofline"] + "\n";
    if (responseValue[0]["esi_addressline1"] != null) address += responseValue[0]["esi_addressline1"] + "\n";
    if (responseValue[0]["esi_addressline2"] != null) address += responseValue[0]["esi_addressline2"] + "\n";
    if (responseValue[0]["esi_cityname"] != null) address += responseValue[0]["esi_cityname"] + "\n";
    if (responseValue[0]["esi_provincename"] != null) address += responseValue[0]["esi_provincename@OData.Community.Display.V1.FormattedValue"] + "\n";

    document.getElementById("txtAddress").innerText = address;

    if (responseValue[0]["esi_preferredcontactmethod"] != null)
        document.getElementById("txtContactMethod").innerText = responseValue[0]["esi_preferredcontactmethod@OData.Community.Display.V1.FormattedValue"];
}


function errorcallback(response) {
    Xrm.Utility.alertDialog("Error occurred while retrieving Member Details");
}

function setBillingAddress() {
    if (document.getElementById('IsBillAddress').checked) {
        document.getElementById('txtBillAddress').innerText = document.getElementById("txtAddress").innerText;
        document.getElementById('lblAddress').style.display = 'block';
    } else {
        document.getElementById('txtBillAddress').innerText = "";
        document.getElementById('lblAddress').style.display = 'none';
    }
}

function ShowShippingAddress() {
    if (document.getElementById('IsShipping').checked) {
        document.getElementById('tblShippingAddress').style.display = 'block';
    } else {
        document.getElementById('tblShippingAddress').style.display = 'none';
    }
}

function getMemberShippingAddress() {

    //Call to Integration API and retrieve Shipping Address Information and
    //display in CRM using DropDown list
    //Add address to listbox - lstAddress

    var url = "/api/data/v8.0/esi_AXShippingAddress";
    SDK.ESI.Retrieve(url, succescallbackAddress, errorcallback);
}
function succescallbackAddress(response) {
    //Call to Integration API and retrieve Shipping Address Information and
    //display in CRM using DropDown list
    if (response["Result"] == null) {
        //Display Error Message
        window.parent.Xrm.Page.ui.setFormNotification(response["Message"], "ERROR");
    } else {
        var opt = document.createElement("option");
        opt.text = "Select Address";
        opt.value = "-1";
        document.getElementById("lstAddress1").options.add(opt);

        //Iterate through Shipping Address and Populate DropDown
        var result = JSON.parse(response["Result"]);
        for (i = 0; i < result.length - 1; i++) {
            var opt = document.createElement("option");
            var address = "";
            address = result[i]["address1"];
            address += result[i]["address2"] != null ? " " + result[i]["address2"] : "";
            address += result[i]["city"] != null ? " " + result[i]["city"] : "";
            address += result[i]["postalCode"] != null ? " " + result[i]["postalCode"] : "";
            opt.text = address;
            opt.value = result[i]["addressId"];
            document.getElementById("lstAddress1").options.add(opt);
        }
    }

    //Copy Address to other Address Drop Down
    copyDDL("lstAddress1", "lstAddress3");
    copyDDL("lstAddress1", "lstAddress4");
    copyDDL("lstAddress1", "lstAddress5");
    copyDDL("lstAddress1", "lstAddress6");
}

function copyDDL(sourceDDL, targetDDL) { // passed in as strings
    var ddl1 = document.getElementById(sourceDDL);
    var ddl2 = document.getElementById(targetDDL);
    for (var i = 0; i < ddl1.options.length; i++) {
        addOption(ddl2, ddl1.options[i].text, ddl1.options[i].value);
    }
}
function addOption(object, text, value) {
    var defaultSelected = false;
    var selected = false;
    var optionName = new Option(text, value, defaultSelected, selected)
    object.options[object.length] = optionName;
}

function createPrescripionTransfer() {

    //Prescription Transfer Entity

    var entity = {};
    var MyDate = new Date();
    var datestring = MyDate.getFullYear() + "-" + ('0' + (MyDate.getMonth() + 1)).slice(-2) + "-" + ('0' + MyDate.getDate()).slice(-2);
    entity.esi_DateOfTransfer = datestring;

    entity.esi_PlanMemberId = {
        Id: PlanMemberID,
        LogicalName: "esi_planmember"
    };
    entity.esi_ServiceRequestType = {
        Value: 1 //esiservicerequesttype: 1 = Transfer In to ESC Pharmacy
    };
    entity.esi_SourceOfRequest = {
        Value: 1 //esi_sourceofrequest: 1 = Phone Call
    };
    entity.statuscode = {
        Value: 1 //statuscode: 1 = In-Progress
    };
    entity.esi_PrescriptionTransferName = "From CRM Member Form";
    TransferRequest = [
        {
            esi_AXAddressID: "443322",
            esi_DrugCatalogId: {
                Id: "c7679dac-cf73-e711-810f-005056bd6fe0",
                LogicalName: "esi_drugcatalog"
            },
            esi_OriginalRxNumber: "123456",
            esi_PharmacyName: "SDM",
            esi_PharmacyPhoneNumber: "416-800-8000",
            esi_PharmacyPhoneType: {
                Value: 859270001
            },
            esi_TransferRequestType: {
                Value: 1
            }
        },
        {
            esi_AXAddressID: "443344",
            esi_DrugCatalogId: {
                Id: "c3679dac-cf73-e711-810f-005056bd6fe0",
                LogicalName: "esi_drugcatalog"
            },
            esi_OriginalRxNumber: "123444",
            esi_PharmacyName: "Shoppers Drug Mart",
            esi_PharmacyPhoneNumber: "416-800-9898",
            esi_PharmacyPhoneType: {
                Value: 859270001
            },
            esi_TransferRequestType: {
                Value: 1
            }
        }
    ]

    //Related Drug Transfer Request
    entity["esi_esi_prescriptiontransfer_esi_transferrequest_PrescriptionTransferId"] = TransferRequest;

    var req = new XMLHttpRequest();
    req.open("POST", encodeURI(Xrm.Page.context.getClientUrl() + "/XRMServices/2011/OrganizationData.svc/esi_PrescriptionTransferSet"), false);
    req.setRequestHeader("Accept", "application/json");
    req.setRequestHeader("Content-Type", "application/json; charset=utf-8");
    req.onreadystatechange = function () {
        if (this.readyState === 4) {
            this.onreadystatechange = null;
            if (this.status === 201) {
                var result = JSON.parse(this.responseText).d;
                var newEntityId = result.esi_PrescriptionTransferId;
                Xrm.Utility.alertDialog("Prescription Transfer created successfully.");
            } else {
                Xrm.Utility.alertDialog(this.statusText);
            }
        }
    };
    req.send(JSON.stringify(entity));

}

function ShowCCInfo() {
    if (document.getElementById('IsNewCreditCard').checked) {
        document.getElementById('tblCreditCard').style.display = 'block';
        document.getElementById('txtCCName').innerText = "";
        document.getElementById('txtExpMonth').innerText = "";
        document.getElementById('txtExpYear').innerText = "";
        document.getElementById('txtCCNumber').innerText = "";
        document.getElementById('txtCVV').innerText = "";
    } else {
        document.getElementById('tblCreditCard').style.display = 'none';
    }
}

function processPayment() {

}

function getMemberCreditCardInfo() {
    // Create an Option object

    var opt = document.createElement("option");
    opt.text = "Select Credit Card";
    opt.value = "-1";
    document.getElementById("lstCreditCards").options.add(opt);

    var opt = document.createElement("option");
    opt.text = "1234 XXXX XXXX 9876";
    opt.value = "1234 XXXX XXXX 9876";
    document.getElementById("lstCreditCards").options.add(opt);
}

function populateCCInfo() {
    var select = document.getElementById("lstCreditCards");
    document.getElementById('txtCCName').innerText = "";
    document.getElementById('txtExpMonth').innerText = "";
    document.getElementById('txtExpYear').innerText = "";
    document.getElementById('txtCCNumber').innerText = "";
    document.getElementById('txtCVV').innerText = "";
    if (select.selectedIndex == 0) {
        document.getElementById('tblCreditCard').style.display = 'none';
        return;
    }        
    document.getElementById('tblCreditCard').style.display = 'block';
    document.getElementById('txtCCName').innerText = "Tom N Jerry";
    document.getElementById('txtExpMonth').innerText = "01";
    document.getElementById('txtExpYear').innerText = "2020";
    document.getElementById('txtCCNumber').innerText = "1234 XXXX XXXX 9876";
    document.getElementById('txtCVV').innerText = "123";
}
